schema {
  mutation: RootMutationType
  query: RootQueryType
}

"The result of the :destroy_ticket mutation"
type DestroyTicketResult {
  "The record that was successfully deleted"
  result: Ticket

  "Any errors generated, if the mutation failed"
  errors: [MutationError!]
}

"The result of the :update_ticket mutation"
type UpdateTicketResult {
  "The successful result of the mutation"
  result: Ticket

  "Any errors generated, if the mutation failed"
  errors: [MutationError!]
}

input UpdateTicketInput {
  subject: String
  status: TicketStatus
  representativeId: ID
}

"The result of the :create_ticket mutation"
type CreateTicketResult {
  "The successful result of the mutation"
  result: Ticket

  "Any errors generated, if the mutation failed"
  errors: [MutationError!]
}

input CreateTicketInput {
  subject: String!
  status: TicketStatus
  representativeId: ID
}

enum TicketStatus {
  OPEN
  CLOSED
}

enum TicketSortField {
  ID
  SUBJECT
  STATUS
  REPRESENTATIVE_ID
}

input TicketFilterRepresentativeId {
  isNil: Boolean
  eq: ID
  notEq: ID
  in: [ID]
  lessThan: ID
  greaterThan: ID
  lessThanOrEqual: ID
  greaterThanOrEqual: ID
}

input TicketFilterStatus {
  isNil: Boolean
  eq: TicketStatus
  notEq: TicketStatus
  in: [TicketStatus!]
  lessThan: TicketStatus
  greaterThan: TicketStatus
  lessThanOrEqual: TicketStatus
  greaterThanOrEqual: TicketStatus
}

input TicketFilterSubject {
  isNil: Boolean
  eq: String
  notEq: String
  in: [String!]
  lessThan: String
  greaterThan: String
  lessThanOrEqual: String
  greaterThanOrEqual: String
}

input TicketFilterId {
  isNil: Boolean
  eq: ID
  notEq: ID
  in: [ID!]
  lessThan: ID
  greaterThan: ID
  lessThanOrEqual: ID
  greaterThanOrEqual: ID
}

input TicketFilterInput {
  and: [TicketFilterInput!]
  or: [TicketFilterInput!]
  not: [TicketFilterInput!]
  id: TicketFilterId
  subject: TicketFilterSubject
  status: TicketFilterStatus
  representativeId: TicketFilterRepresentativeId
}

input TicketSortInput {
  order: SortOrder
  field: TicketSortField!
}

type Ticket {
  id: ID!
  subject: String!
  status: TicketStatus!
  representativeId: ID
}

enum SortOrder {
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
}

"An error generated by a failed mutation"
type MutationError {
  "The human readable error message"
  message: String

  "A shorter error message, with vars not replaced"
  shortMessage: String

  "Replacements for the short message"
  vars: Json

  "An error code for the given error"
  code: String

  "The field or fields that produced the error"
  fields: [String!]
}

type RootQueryType {
  getTicket(
    "The id of the record"
    id: ID!
  ): Ticket
  listTickets(
    "How to sort the records in the response"
    sort: [TicketSortInput]

    "A filter to limit the results"
    filter: TicketFilterInput

    representativeId: ID
  ): [Ticket!]!
}

type RootMutationType {
  createTicket(input: CreateTicketInput!): CreateTicketResult!
  updateTicket(id: ID!, input: UpdateTicketInput): UpdateTicketResult!
  destroyTicket(id: ID!): DestroyTicketResult!
}

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json
